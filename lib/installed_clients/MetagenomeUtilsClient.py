# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class MetagenomeUtils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def file_to_binned_contigs(self, params, context=None):
        """
        file_to_binned_contigs: Generating BinnedContigs ojbect from files
        input params:
        file_directory: file directory containing compressed/unpacked contig file(s) to build BinnedContig object
        assembly_ref: Metagenome assembly object reference
        binned_contig_name: BinnedContig object name
        workspace_name: the name/id of the workspace it gets saved to
        return params:
        binned_contig_obj_ref: generated result BinnedContig object reference
        :param params: instance of type "FileToBinnedContigParams"
           (file_directory: file directory containing compressed/unpacked
           contig file(s) to build BinnedContig object assembly_ref:
           Metagenome assembly object reference binned_contig_name:
           BinnedContig object name workspace_name: the name/id of the
           workspace it gets saved to) -> structure: parameter
           "file_directory" of String, parameter "assembly_ref" of type
           "obj_ref" (An X/Y/Z style reference), parameter
           "binned_contig_name" of String, parameter "workspace_name" of
           String
        :returns: instance of type "FileToBinnedContigResult" -> structure:
           parameter "binned_contig_obj_ref" of type "obj_ref" (An X/Y/Z
           style reference)
        """
        return self._client.run_job('MetagenomeUtils.file_to_binned_contigs',
                                    [params], self._service_ver, context)

    def binned_contigs_to_file(self, params, context=None):
        """
        binned_contigs_to_file: Convert BinnedContig object to fasta files and pack them to shock
        required params:
        input_ref: BinnedContig object reference
        optional params:
        save_to_shock: saving result bin files to shock. default to True
        return params:
        shock_id: saved packed file shock id (None if save_to_shock is set to False)
        bin_file_directory: directory that contains all bin files
        :param params: instance of type "ExportParams" (input_ref:
           BinnedContig object reference optional params: save_to_shock:
           saving result bin files to shock. default to True) -> structure:
           parameter "input_ref" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "ExportOutput" (shock_id: saved packed
           file shock id bin_file_directory: directory that contains all bin
           files) -> structure: parameter "shock_id" of String, parameter
           "bin_file_directory" of String
        """
        return self._client.run_job('MetagenomeUtils.binned_contigs_to_file',
                                    [params], self._service_ver, context)

    def export_binned_contigs_as_excel(self, params, context=None):
        """
        export_binned_contigs_as_excel: Convert BinnedContig object to an excel file and pack it to shock
        required params:
        input_ref: BinnedContig object reference
        optional params:
        save_to_shock: saving result bin files to shock. default to True
        return params:
        shock_id: saved packed file shock id (None if save_to_shock is set to False)
        bin_file_directory: directory that contains all bin files
        :param params: instance of type "ExportParams" (input_ref:
           BinnedContig object reference optional params: save_to_shock:
           saving result bin files to shock. default to True) -> structure:
           parameter "input_ref" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "ExportOutput" (shock_id: saved packed
           file shock id bin_file_directory: directory that contains all bin
           files) -> structure: parameter "shock_id" of String, parameter
           "bin_file_directory" of String
        """
        return self._client.run_job('MetagenomeUtils.export_binned_contigs_as_excel',
                                    [params], self._service_ver, context)

    def import_excel_as_binned_contigs(self, params, context=None):
        """
        import_excel_as_binned_contigs: Import an excel file as BinnedContigs
        required params:
        shock_id: Excel file stored in shock
        workspace_name: the name of the workspace object gets saved to
        optional params:
        binned_contigs_name: saved BinnedContig name. 
                             Auto append timestamp from excel if not given.
        :param params: instance of type "ImportExcelParams" -> structure:
           parameter "shock_id" of String, parameter "workspace_name" of
           String, parameter "binned_contigs_name" of String
        :returns: instance of type "ImportExcelOutput" -> structure:
           parameter "report_name" of String, parameter "report_ref" of
           String, parameter "binned_contigs_ref" of String
        """
        return self._client.run_job('MetagenomeUtils.import_excel_as_binned_contigs',
                                    [params], self._service_ver, context)

    def extract_binned_contigs_as_assembly(self, params, context=None):
        """
        extract_binned_contigs_as_assembly: extract one/multiple Bins from BinnedContigs as Assembly object
        input params:
        binned_contig_obj_ref: BinnedContig object reference
        extracted_assemblies: a list of:
              bin_id: target bin id to be extracted
              assembly_suffix: suffix appended to assembly object name
        workspace_name: the name of the workspace it gets saved to
        return params:
        assembly_ref_list: list of generated result Assembly object reference
        report_name: report name generated by KBaseReport
        report_ref: report reference generated by KBaseReport
        :param params: instance of type "ExtractBinAsAssemblyParams"
           (binned_contig_obj_ref: BinnedContig object reference
           extracted_assemblies: a list of dictionaries: bin_id: target bin
           id to be extracted assembly_suffix: suffix appended to assembly
           object name assembly_set_name:  name for created assembly set
           workspace_name: the name of the workspace it gets saved to) ->
           structure: parameter "binned_contig_obj_ref" of type "obj_ref" (An
           X/Y/Z style reference), parameter "extracted_assemblies" of
           String, parameter "assembly_suffix" of String, parameter
           "assembly_set_name" of String, parameter "workspace_name" of String
        :returns: instance of type "ExtractBinAsAssemblyResult"
           (assembly_ref_list: list of generated Assembly object reference
           report_name: report name generated by KBaseReport report_ref:
           report reference generated by KBaseReport) -> structure: parameter
           "assembly_ref_list" of list of type "obj_ref" (An X/Y/Z style
           reference), parameter "report_name" of String, parameter
           "report_ref" of String, parameter "assembly_set_ref" of String
        """
        return self._client.run_job('MetagenomeUtils.extract_binned_contigs_as_assembly',
                                    [params], self._service_ver, context)

    def remove_bins_from_binned_contig(self, params, context=None):
        """
        remove_bins_from_binned_contig: remove a list of bins from BinnedContig object
        input params:
        old_binned_contig_ref: Original BinnedContig object reference
        bins_to_remove: a list of bin ids to be removed
        output_binned_contig_name: Name for the output BinnedContigs object
        workspace_name: the name of the workspace new object gets saved to
        return params:
        new_binned_contig_ref: newly created BinnedContig object referece
        :param params: instance of type "RemoveBinsParams"
           (old_binned_contig_ref: Original BinnedContig object reference
           bins_to_remove: a list of bin ids to be removed
           output_binned_contig_name: Name for the output BinnedContigs
           object workspace_name: the name of the workspace new object gets
           saved to) -> structure: parameter "old_binned_contig_ref" of type
           "obj_ref" (An X/Y/Z style reference), parameter "bins_to_remove"
           of list of String, parameter "output_binned_contig_name" of
           String, parameter "workspace_name" of String
        :returns: instance of type "RemoveBinsResult" (new_binned_contig_ref:
           newly created BinnedContig object referece report_name: report
           name generated by KBaseReport report_ref: report reference
           generated by KBaseReport) -> structure: parameter
           "new_binned_contig_ref" of type "obj_ref" (An X/Y/Z style
           reference)
        """
        return self._client.run_job('MetagenomeUtils.remove_bins_from_binned_contig',
                                    [params], self._service_ver, context)

    def merge_bins_from_binned_contig(self, params, context=None):
        """
        merge_bins_from_binned_contig: merge a list of bins from BinnedContig object
        input params:
        old_binned_contig_ref: Original BinnedContig object reference
        bin_merges: a list of bin merges dicts
          new_bin_id: newly created bin id
          bin_to_merge: list of bins to merge
        output_binned_contig_name: Name for the output BinnedContigs object
        workspace_name: the name of the workspace new object gets saved to
        return params:
        new_binned_contig_ref: newly created BinnedContig object referece
        :param params: instance of type "MergeBinsParams"
           (old_binned_contig_ref: Original BinnedContig object reference
           bin_merges: a list of bin merges dicts new_bin_id: newly created
           bin id bin_to_merge: list of bins to merge
           output_binned_contig_name: Name for the output BinnedContigs
           object workspace_name: the name of the workspace new object gets
           saved to) -> structure: parameter "old_binned_contig_ref" of type
           "obj_ref" (An X/Y/Z style reference), parameter "bin_merges" of
           list of mapping from String to String, parameter
           "output_binned_contig_name" of String, parameter "workspace_name"
           of String
        :returns: instance of type "MergeBinsResult" (new_binned_contig_ref:
           newly created BinnedContig object referece) -> structure:
           parameter "new_binned_contig_ref" of type "obj_ref" (An X/Y/Z
           style reference)
        """
        return self._client.run_job('MetagenomeUtils.merge_bins_from_binned_contig',
                                    [params], self._service_ver, context)

    def edit_bins_from_binned_contig(self, params, context=None):
        """
        edit_bins_from_binned_contig: merge/remove a list of bins from BinnedContig object
        a wrapper method of:
        merge_bins_from_binned_contig
        remove_bins_from_binned_contig
        input params:
        old_binned_contig_ref: Original BinnedContig object reference
        bins_to_remove: a list of bin ids to be removed
        bin_merges: a list of bin merges dicts
          new_bin_id: newly created bin id
          bin_to_merge: list of bins to merge
        output_binned_contig_name: Name for the output BinnedContigs object
        workspace_name: the name of the workspace new object gets saved to
        return params:
        new_binned_contig_ref: newly created BinnedContig object referece
        report_name: report name generated by KBaseReport
        report_ref: report reference generated by KBaseReport
        :param params: instance of type "EditBinsParams"
           (old_binned_contig_ref: Original BinnedContig object reference
           bins_to_remove: a list of bin ids to be removed bin_merges: a list
           of bin merges dicts new_bin_id: newly created bin id bin_to_merge:
           list of bins to merge output_binned_contig_name: Name for the
           output BinnedContigs object workspace_name: the name of the
           workspace new object gets saved to) -> structure: parameter
           "old_binned_contig_ref" of type "obj_ref" (An X/Y/Z style
           reference), parameter "bins_to_remove" of list of String,
           parameter "bin_merges" of list of mapping from String to String,
           parameter "output_binned_contig_name" of String, parameter
           "workspace_name" of String
        :returns: instance of type "EditBinsResult" (new_binned_contig_ref:
           newly created BinnedContig object referece report_name: report
           name generated by KBaseReport report_ref: report reference
           generated by KBaseReport) -> structure: parameter
           "new_binned_contig_ref" of type "obj_ref" (An X/Y/Z style
           reference), parameter "report_name" of String, parameter
           "report_ref" of String
        """
        return self._client.run_job('MetagenomeUtils.edit_bins_from_binned_contig',
                                    [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('MetagenomeUtils.status',
                                    [], self._service_ver, context)
